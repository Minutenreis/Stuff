$date
	Wed Nov  2 17:23:28 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ripple_carry_adder_4_tb $end
$var wire 4 ! l_s [3:0] $end
$var wire 1 " l_carry_out $end
$var reg 4 # l_a [3:0] $end
$var reg 4 $ l_b [3:0] $end
$var reg 1 % l_carry_in $end
$scope module m_dut $end
$var wire 4 & i_a [3:0] $end
$var wire 4 ' i_b [3:0] $end
$var wire 1 % i_carry_in $end
$var wire 4 ( o_s [3:0] $end
$var wire 1 " o_carry_out $end
$var wire 1 ) l_c2 $end
$var wire 1 * l_c1 $end
$var wire 1 + l_c0 $end
$scope module add0 $end
$var wire 1 , i_a $end
$var wire 1 - i_b $end
$var wire 1 % i_carry_in $end
$var wire 1 . l_ab $end
$var wire 1 / l_bc $end
$var wire 1 0 l_ca $end
$var wire 1 + o_carry_out $end
$var wire 1 1 o_s $end
$upscope $end
$scope module add1 $end
$var wire 1 2 i_a $end
$var wire 1 3 i_b $end
$var wire 1 + i_carry_in $end
$var wire 1 4 l_ab $end
$var wire 1 5 l_bc $end
$var wire 1 6 l_ca $end
$var wire 1 * o_carry_out $end
$var wire 1 7 o_s $end
$upscope $end
$scope module add2 $end
$var wire 1 8 i_a $end
$var wire 1 9 i_b $end
$var wire 1 * i_carry_in $end
$var wire 1 : l_ab $end
$var wire 1 ; l_bc $end
$var wire 1 < l_ca $end
$var wire 1 ) o_carry_out $end
$var wire 1 = o_s $end
$upscope $end
$scope module add3 $end
$var wire 1 > i_a $end
$var wire 1 ? i_b $end
$var wire 1 ) i_carry_in $end
$var wire 1 @ l_ab $end
$var wire 1 A l_bc $end
$var wire 1 B l_ca $end
$var wire 1 " o_carry_out $end
$var wire 1 C o_s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
11
17
b1011 !
b1011 (
1C
1-
12
1>
b1 $
b1 '
b1010 #
b1010 &
#20
07
b1101 !
b1101 (
1=
0-
02
18
1%
b0 $
b0 '
b1100 #
b1100 &
#30
1"
0C
1A
1)
0=
1<
1*
15
1+
07
b0 !
b0 (
01
10
13
1?
1,
0>
b1010 $
b1010 '
b101 #
b101 &
#40
0<
0*
17
0+
05
0=
1:
0;
06
b11 !
b11 (
11
00
03
19
12
0%
b1100 $
b1100 '
b111 #
b111 &
#50
1=
1;
1<
15
16
1*
1+
1.
17
14
b1111 !
b1111 (
1C
1@
1B
1/
10
1-
13
1>
1%
b1111 $
b1111 '
b1111 #
b1111 &
#60
